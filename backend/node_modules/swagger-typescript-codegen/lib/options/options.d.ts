/// <reference types="js-beautify" />
import * as Mustache from "mustache";
import { Swagger } from "../swagger/Swagger";
export interface Template {
    readonly class: string;
    readonly method: string;
    readonly type: string;
}
interface Options {
    readonly isES6: boolean;
    readonly moduleName: string;
    readonly includeDeprecated: boolean;
    readonly imports: ReadonlyArray<string>;
    readonly className: string;
    readonly template: Partial<Template>;
    readonly mustache: typeof Mustache;
    readonly beautify: ((source: string) => string) | boolean;
    readonly beautifyOptions: JsBeautifyOptions;
    readonly convertQueryParamsToFormDataInPOST: boolean;
}
interface SwaggerOption {
    readonly swagger: Swagger;
}
/**
 * This is the internal interface we use to reference to the full Options object with defaults
 */
export interface CodeGenOptions extends Options, SwaggerOption {
}
/**
 * All options except the swagger object are optional when passing in options
 */
export interface ProvidedCodeGenOptions extends Partial<Options>, SwaggerOption {
}
/**
 * Merge passed options with the default options.
 */
export declare function makeOptions(options: ProvidedCodeGenOptions): CodeGenOptions;
/**
 * Validate that the options have required variables for custom generation.
 */
export declare function validateOptions(options: ProvidedCodeGenOptions): void;
export {};
//# sourceMappingURL=options.d.ts.map